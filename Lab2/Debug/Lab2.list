
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800042c  08000434  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800042c  0800042c  00010434  2**0
                  CONTENTS
  4 .ARM          00000000  0800042c  0800042c  00010434  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800042c  08000434  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010434  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a5e  00000000  00000000  000104a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002be  00000000  00000000  00010f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000f0  00000000  00000000  000111c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000a2  00000000  00000000  000112b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e4c2  00000000  00000000  0001135a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000176e  00000000  00000000  0002f81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000babf4  00000000  00000000  00030f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000023c  00000000  00000000  000ebb80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000ebdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000414 	.word	0x08000414

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000414 	.word	0x08000414

080001c8 <SysTick_Handler>:

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
///////////void SystemClock_Config(void);
void SysTick_Handler(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    millis++;  // Increment every 1ms (assuming 1ms SysTick configured)
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <SysTick_Handler+0x18>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	3301      	adds	r3, #1
 80001d2:	4a03      	ldr	r2, [pc, #12]	; (80001e0 <SysTick_Handler+0x18>)
 80001d4:	6013      	str	r3, [r2, #0]
}
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	2000001c 	.word	0x2000001c

080001e4 <GPIO_Config>:
void delay_ms(uint32_t delay) {
    uint32_t start = millis;
    while ((millis - start) < delay);  // Wait until delay time is reached
}
void GPIO_Config(void) {
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
    GPIOD_CLK_EN();  // Enable clock for GPIOD
 80001e8:	4b23      	ldr	r3, [pc, #140]	; (8000278 <GPIO_Config+0x94>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a22      	ldr	r2, [pc, #136]	; (8000278 <GPIO_Config+0x94>)
 80001ee:	f043 0308 	orr.w	r3, r3, #8
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30

    GPIOD->MODER &= ~(3 << (Red_LED_PIN * 2));  // Clear mode bits
 80001f4:	4b21      	ldr	r3, [pc, #132]	; (800027c <GPIO_Config+0x98>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a20      	ldr	r2, [pc, #128]	; (800027c <GPIO_Config+0x98>)
 80001fa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80001fe:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (1 << (Red_LED_PIN * 2));   // Set as output mode
 8000200:	4b1e      	ldr	r3, [pc, #120]	; (800027c <GPIO_Config+0x98>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a1d      	ldr	r2, [pc, #116]	; (800027c <GPIO_Config+0x98>)
 8000206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800020a:	6013      	str	r3, [r2, #0]
    GPIOD->OTYPER &= ~(1 << Red_LED_PIN);       // Push-pull output
 800020c:	4b1b      	ldr	r3, [pc, #108]	; (800027c <GPIO_Config+0x98>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	4a1a      	ldr	r2, [pc, #104]	; (800027c <GPIO_Config+0x98>)
 8000212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000216:	6053      	str	r3, [r2, #4]
    GPIOD->OSPEEDR |= (2 << (Red_LED_PIN * 2)); // Medium speed
 8000218:	4b18      	ldr	r3, [pc, #96]	; (800027c <GPIO_Config+0x98>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	4a17      	ldr	r2, [pc, #92]	; (800027c <GPIO_Config+0x98>)
 800021e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000222:	6093      	str	r3, [r2, #8]
    GPIOD->PUPDR &= ~(3 << (Red_LED_PIN * 2));  // No pull-up/pull-down
 8000224:	4b15      	ldr	r3, [pc, #84]	; (800027c <GPIO_Config+0x98>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	4a14      	ldr	r2, [pc, #80]	; (800027c <GPIO_Config+0x98>)
 800022a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800022e:	60d3      	str	r3, [r2, #12]

    GPIOD->MODER &= ~(3 << (Orange_LED_PIN * 2));  // Clear mode bits
 8000230:	4b12      	ldr	r3, [pc, #72]	; (800027c <GPIO_Config+0x98>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a11      	ldr	r2, [pc, #68]	; (800027c <GPIO_Config+0x98>)
 8000236:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800023a:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (1 << (Orange_LED_PIN * 2));   // Set as output mode
 800023c:	4b0f      	ldr	r3, [pc, #60]	; (800027c <GPIO_Config+0x98>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a0e      	ldr	r2, [pc, #56]	; (800027c <GPIO_Config+0x98>)
 8000242:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000246:	6013      	str	r3, [r2, #0]
    GPIOD->OTYPER &= ~(1 << Orange_LED_PIN);       // Push-pull output
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <GPIO_Config+0x98>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a0b      	ldr	r2, [pc, #44]	; (800027c <GPIO_Config+0x98>)
 800024e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000252:	6053      	str	r3, [r2, #4]
    GPIOD->OSPEEDR |= (2 << (Orange_LED_PIN * 2)); // Medium speed
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <GPIO_Config+0x98>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	4a08      	ldr	r2, [pc, #32]	; (800027c <GPIO_Config+0x98>)
 800025a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800025e:	6093      	str	r3, [r2, #8]
    GPIOD->PUPDR &= ~(3 << (Orange_LED_PIN * 2));  // No pull-up/pull-down
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <GPIO_Config+0x98>)
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	4a05      	ldr	r2, [pc, #20]	; (800027c <GPIO_Config+0x98>)
 8000266:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800026a:	60d3      	str	r3, [r2, #12]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	40020c00 	.word	0x40020c00

08000280 <SysTick_Config_Custom>:
void SysTick_Config_Custom(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    SysTick->LOAD = (16000 - 1);  // Assuming 16 MHz clock => 1ms tick
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <SysTick_Config_Custom+0x24>)
 8000286:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800028a:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <SysTick_Config_Custom+0x24>)
 800028e:	2200      	movs	r2, #0
 8000290:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 7;  // Enable SysTick, use system clock, enable interrupt
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <SysTick_Config_Custom+0x24>)
 8000294:	2207      	movs	r2, #7
 8000296:	601a      	str	r2, [r3, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
  /* Initialize all configured peripherals */
  //////MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  SysTick_Config_Custom();  // Configure SysTick for 1ms
 80002ae:	f7ff ffe7 	bl	8000280 <SysTick_Config_Custom>
  GPIO_Config();            // Configure LED pin
 80002b2:	f7ff ff97 	bl	80001e4 <GPIO_Config>

  uint32_t prevMillis14 = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
  uint32_t prevMillis13 = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if ((millis - prevMillis14) >= 1000) {  // Check if 1000ms elapsed
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <main+0x5c>)
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002ca:	d308      	bcc.n	80002de <main+0x36>
	              GPIOD->ODR ^= (1 << Red_LED_PIN);  // Toggle LED
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <main+0x60>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <main+0x60>)
 80002d2:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80002d6:	6153      	str	r3, [r2, #20]
	              prevMillis14 = millis;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <main+0x5c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	607b      	str	r3, [r7, #4]
	          }
	  if ((millis - prevMillis13) >= 3000) {  // Check if 1000ms elapsed
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <main+0x5c>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d9e7      	bls.n	80002be <main+0x16>
	     GPIOD->ODR ^= (1 << Orange_LED_PIN);  // Toggle LED
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <main+0x60>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a05      	ldr	r2, [pc, #20]	; (8000308 <main+0x60>)
 80002f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002f8:	6153      	str	r3, [r2, #20]
	  	    prevMillis13 = millis;
 80002fa:	4b02      	ldr	r3, [pc, #8]	; (8000304 <main+0x5c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	603b      	str	r3, [r7, #0]
	  if ((millis - prevMillis14) >= 1000) {  // Check if 1000ms elapsed
 8000300:	e7dd      	b.n	80002be <main+0x16>
 8000302:	bf00      	nop
 8000304:	2000001c 	.word	0x2000001c
 8000308:	40020c00 	.word	0x40020c00

0800030c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000310:	e7fe      	b.n	8000310 <NMI_Handler+0x4>

08000312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000316:	e7fe      	b.n	8000316 <HardFault_Handler+0x4>

08000318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800031c:	e7fe      	b.n	800031c <MemManage_Handler+0x4>

0800031e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000322:	e7fe      	b.n	8000322 <BusFault_Handler+0x4>

08000324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000328:	e7fe      	b.n	8000328 <UsageFault_Handler+0x4>

0800032a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr

08000346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <SystemInit+0x20>)
 800035a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800035e:	4a05      	ldr	r2, [pc, #20]	; (8000374 <SystemInit+0x20>)
 8000360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800037e:	490e      	ldr	r1, [pc, #56]	; (80003b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000380:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000394:	4c0b      	ldr	r4, [pc, #44]	; (80003c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003a2:	f7ff ffd7 	bl	8000354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003aa:	f7ff ff7d 	bl	80002a8 <main>
  bx  lr    
 80003ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003bc:	08000434 	.word	0x08000434
  ldr r2, =_sbss
 80003c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c4:	20000020 	.word	0x20000020

080003c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	; (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	; (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	; (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	; (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	0800042c 	.word	0x0800042c
 8000408:	0800042c 	.word	0x0800042c
 800040c:	0800042c 	.word	0x0800042c
 8000410:	08000430 	.word	0x08000430

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
