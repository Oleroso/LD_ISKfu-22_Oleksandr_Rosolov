
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000344  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004cc  080004d4  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004cc  080004cc  000104d4  2**0
                  CONTENTS
  4 .ARM          00000000  080004cc  080004cc  000104d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004cc  080004d4  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004cc  080004cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104d4  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010504  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000ab8  00000000  00000000  00010547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002c7  00000000  00000000  00010fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000f0  00000000  00000000  000112c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000a3  00000000  00000000  000113b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e4ce  00000000  00000000  0001145b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001796  00000000  00000000  0002f929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bac4b  00000000  00000000  000310bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000023c  00000000  00000000  000ebd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000ebf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004b4 	.word	0x080004b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080004b4 	.word	0x080004b4

080001c8 <SysTick_Handler>:


volatile uint32_t millis = 0;

///////////void SystemClock_Config(void);
void SysTick_Handler(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    millis++;  // Increment every 1ms (assuming 1ms SysTick configured)
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <SysTick_Handler+0x18>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	3301      	adds	r3, #1
 80001d2:	4a03      	ldr	r2, [pc, #12]	; (80001e0 <SysTick_Handler+0x18>)
 80001d4:	6013      	str	r3, [r2, #0]
}
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	2000001c 	.word	0x2000001c

080001e4 <delay_ms>:
void delay_ms(uint32_t delay) {
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
    uint32_t start = millis;
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <delay_ms+0x2c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	60fb      	str	r3, [r7, #12]
    while ((millis - start) < delay);  // Wait until delay time is reached
 80001f2:	bf00      	nop
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <delay_ms+0x2c>)
 80001f6:	681a      	ldr	r2, [r3, #0]
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	1ad3      	subs	r3, r2, r3
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d8f8      	bhi.n	80001f4 <delay_ms+0x10>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	2000001c 	.word	0x2000001c

08000214 <GPIO_Config>:
void GPIO_Config(void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
    GPIOD_CLK_EN();  // Enable clock for GPIOD
 8000218:	4b2f      	ldr	r3, [pc, #188]	; (80002d8 <GPIO_Config+0xc4>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a2e      	ldr	r2, [pc, #184]	; (80002d8 <GPIO_Config+0xc4>)
 800021e:	f043 0308 	orr.w	r3, r3, #8
 8000222:	6313      	str	r3, [r2, #48]	; 0x30

    GPIOD->MODER &= ~(3 << (Red_LED_PIN * 2));  // Clear mode bits
 8000224:	4b2d      	ldr	r3, [pc, #180]	; (80002dc <GPIO_Config+0xc8>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a2c      	ldr	r2, [pc, #176]	; (80002dc <GPIO_Config+0xc8>)
 800022a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800022e:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (1 << (Red_LED_PIN * 2));   // Set as output mode
 8000230:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <GPIO_Config+0xc8>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a29      	ldr	r2, [pc, #164]	; (80002dc <GPIO_Config+0xc8>)
 8000236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800023a:	6013      	str	r3, [r2, #0]
    GPIOD->OTYPER &= ~(1 << Red_LED_PIN);       // Push-pull output
 800023c:	4b27      	ldr	r3, [pc, #156]	; (80002dc <GPIO_Config+0xc8>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	4a26      	ldr	r2, [pc, #152]	; (80002dc <GPIO_Config+0xc8>)
 8000242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000246:	6053      	str	r3, [r2, #4]
    GPIOD->OSPEEDR |= (2 << (Red_LED_PIN * 2)); // Medium speed
 8000248:	4b24      	ldr	r3, [pc, #144]	; (80002dc <GPIO_Config+0xc8>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a23      	ldr	r2, [pc, #140]	; (80002dc <GPIO_Config+0xc8>)
 800024e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000252:	6093      	str	r3, [r2, #8]
    GPIOD->PUPDR &= ~(3 << (Red_LED_PIN * 2));  // No pull-up/pull-down
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <GPIO_Config+0xc8>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a20      	ldr	r2, [pc, #128]	; (80002dc <GPIO_Config+0xc8>)
 800025a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800025e:	60d3      	str	r3, [r2, #12]

    GPIOD->MODER &= ~(3 << (Orange_LED_PIN * 2));  // Clear mode bits
 8000260:	4b1e      	ldr	r3, [pc, #120]	; (80002dc <GPIO_Config+0xc8>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <GPIO_Config+0xc8>)
 8000266:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800026a:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (1 << (Orange_LED_PIN * 2));   // Set as output mode
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <GPIO_Config+0xc8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a1a      	ldr	r2, [pc, #104]	; (80002dc <GPIO_Config+0xc8>)
 8000272:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000276:	6013      	str	r3, [r2, #0]
    GPIOD->OTYPER &= ~(1 << Orange_LED_PIN);       // Push-pull output
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <GPIO_Config+0xc8>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <GPIO_Config+0xc8>)
 800027e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000282:	6053      	str	r3, [r2, #4]
    GPIOD->OSPEEDR |= (2 << (Orange_LED_PIN * 2)); // Medium speed
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <GPIO_Config+0xc8>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <GPIO_Config+0xc8>)
 800028a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800028e:	6093      	str	r3, [r2, #8]
    GPIOD->PUPDR &= ~(3 << (Orange_LED_PIN * 2));  // No pull-up/pull-down
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <GPIO_Config+0xc8>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a11      	ldr	r2, [pc, #68]	; (80002dc <GPIO_Config+0xc8>)
 8000296:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800029a:	60d3      	str	r3, [r2, #12]

    RCC->AHB1ENR |= (1 << 0);  // Bit 0: GPIOA Clock enable
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <GPIO_Config+0xc4>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <GPIO_Config+0xc4>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
    BUTTON_PORT->MODER &= ~(3 << (BUTTON_PIN * 2)); // Clear mode bits
 80002a8:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <GPIO_Config+0xcc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <GPIO_Config+0xcc>)
 80002ae:	f023 0303 	bic.w	r3, r3, #3
 80002b2:	6013      	str	r3, [r2, #0]
    BUTTON_PORT->PUPDR &= ~(3 << (BUTTON_PIN * 2));  // Clear
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <GPIO_Config+0xcc>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a09      	ldr	r2, [pc, #36]	; (80002e0 <GPIO_Config+0xcc>)
 80002ba:	f023 0303 	bic.w	r3, r3, #3
 80002be:	60d3      	str	r3, [r2, #12]
    BUTTON_PORT->PUPDR |= (2 << (BUTTON_PIN * 2));   // Pull-down
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <GPIO_Config+0xcc>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a06      	ldr	r2, [pc, #24]	; (80002e0 <GPIO_Config+0xcc>)
 80002c6:	f043 0302 	orr.w	r3, r3, #2
 80002ca:	60d3      	str	r3, [r2, #12]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020c00 	.word	0x40020c00
 80002e0:	40020000 	.word	0x40020000

080002e4 <SysTick_Config_Custom>:
void SysTick_Config_Custom(void) {
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
    SysTick->LOAD = (16000 - 1);  // Assuming 16 MHz clock => 1ms tick
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <SysTick_Config_Custom+0x24>)
 80002ea:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002ee:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <SysTick_Config_Custom+0x24>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 7;  // Enable SysTick, use system clock, enable interrupt
 80002f6:	4b04      	ldr	r3, [pc, #16]	; (8000308 <SysTick_Config_Custom+0x24>)
 80002f8:	2207      	movs	r2, #7
 80002fa:	601a      	str	r2, [r3, #0]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000e010 	.word	0xe000e010

0800030c <main>:

////////static void MX_GPIO_Init(void);

int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b086      	sub	sp, #24
 8000310:	af00      	add	r7, sp, #0

  //////SystemClock_Config();

  //////MX_GPIO_Init();

  SysTick_Config_Custom();  // Configure SysTick for 1ms
 8000312:	f7ff ffe7 	bl	80002e4 <SysTick_Config_Custom>
  GPIO_Config();            // Configure LED pin
 8000316:	f7ff ff7d 	bl	8000214 <GPIO_Config>
  RCC->AHB1ENR |= (1 << 3);
 800031a:	4b20      	ldr	r3, [pc, #128]	; (800039c <main+0x90>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031e:	4a1f      	ldr	r2, [pc, #124]	; (800039c <main+0x90>)
 8000320:	f043 0308 	orr.w	r3, r3, #8
 8000324:	6313      	str	r3, [r2, #48]	; 0x30

  uint32_t prevMillis14 = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
  uint32_t prevMillis13 = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
  uint32_t prevMillis = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]
  uint32_t orangeBlinkPeriod = 1000;
 8000332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000336:	613b      	str	r3, [r7, #16]
  uint8_t PreviousState = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	73fb      	strb	r3, [r7, #15]
	  }
	  PreviousState = CurrentState;

	  */
	  //Task 4
	  if(millis - prevMillis >= orangeBlinkPeriod){
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <main+0x94>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	1ad3      	subs	r3, r2, r3
 8000344:	693a      	ldr	r2, [r7, #16]
 8000346:	429a      	cmp	r2, r3
 8000348:	d808      	bhi.n	800035c <main+0x50>
		  GPIOD->ODR ^= (1 << Orange_LED_PIN);
 800034a:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <main+0x98>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a15      	ldr	r2, [pc, #84]	; (80003a4 <main+0x98>)
 8000350:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000354:	6153      	str	r3, [r2, #20]
		  prevMillis = millis;
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <main+0x94>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	617b      	str	r3, [r7, #20]
	  }
	  uint8_t CurrentState = (BUTTON_PORT->IDR & (1 << BUTTON_PIN)) ? 1 : 0;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <main+0x9c>)
 800035e:	691b      	ldr	r3, [r3, #16]
 8000360:	f003 0301 	and.w	r3, r3, #1
 8000364:	2b00      	cmp	r3, #0
 8000366:	bf14      	ite	ne
 8000368:	2301      	movne	r3, #1
 800036a:	2300      	moveq	r3, #0
 800036c:	b2db      	uxtb	r3, r3
 800036e:	70fb      	strb	r3, [r7, #3]
	  if (CurrentState == 1 && PreviousState == 0){
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d10f      	bne.n	8000396 <main+0x8a>
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10c      	bne.n	8000396 <main+0x8a>
		  delay_ms(50);
 800037c:	2032      	movs	r0, #50	; 0x32
 800037e:	f7ff ff31 	bl	80001e4 <delay_ms>
		  if (((BUTTON_PORT->IDR & (1 << BUTTON_PIN)) ? 1 : 0) == 1){
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <main+0x9c>)
 8000384:	691b      	ldr	r3, [r3, #16]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	2b00      	cmp	r3, #0
 800038c:	d003      	beq.n	8000396 <main+0x8a>
			  orangeBlinkPeriod = orangeBlinkPeriod + 1000;
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000394:	613b      	str	r3, [r7, #16]
		  }
	  }
	  PreviousState = CurrentState;
 8000396:	78fb      	ldrb	r3, [r7, #3]
 8000398:	73fb      	strb	r3, [r7, #15]
  {
 800039a:	e7cf      	b.n	800033c <main+0x30>
 800039c:	40023800 	.word	0x40023800
 80003a0:	2000001c 	.word	0x2000001c
 80003a4:	40020c00 	.word	0x40020c00
 80003a8:	40020000 	.word	0x40020000

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <NMI_Handler+0x4>

080003b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <HardFault_Handler+0x4>

080003b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <MemManage_Handler+0x4>

080003be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c2:	e7fe      	b.n	80003c2 <BusFault_Handler+0x4>

080003c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <UsageFault_Handler+0x4>

080003ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <SystemInit+0x20>)
 80003fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003fe:	4a05      	ldr	r2, [pc, #20]	; (8000414 <SystemInit+0x20>)
 8000400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800041e:	490e      	ldr	r1, [pc, #56]	; (8000458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000420:	4a0e      	ldr	r2, [pc, #56]	; (800045c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000434:	4c0b      	ldr	r4, [pc, #44]	; (8000464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000442:	f7ff ffd7 	bl	80003f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000446:	f000 f811 	bl	800046c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800044a:	f7ff ff5f 	bl	800030c <main>
  bx  lr    
 800044e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800045c:	080004d4 	.word	0x080004d4
  ldr r2, =_sbss
 8000460:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000464:	20000020 	.word	0x20000020

08000468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC_IRQHandler>
	...

0800046c <__libc_init_array>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4d0d      	ldr	r5, [pc, #52]	; (80004a4 <__libc_init_array+0x38>)
 8000470:	4c0d      	ldr	r4, [pc, #52]	; (80004a8 <__libc_init_array+0x3c>)
 8000472:	1b64      	subs	r4, r4, r5
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	2600      	movs	r6, #0
 8000478:	42a6      	cmp	r6, r4
 800047a:	d109      	bne.n	8000490 <__libc_init_array+0x24>
 800047c:	4d0b      	ldr	r5, [pc, #44]	; (80004ac <__libc_init_array+0x40>)
 800047e:	4c0c      	ldr	r4, [pc, #48]	; (80004b0 <__libc_init_array+0x44>)
 8000480:	f000 f818 	bl	80004b4 <_init>
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	10a4      	asrs	r4, r4, #2
 8000488:	2600      	movs	r6, #0
 800048a:	42a6      	cmp	r6, r4
 800048c:	d105      	bne.n	800049a <__libc_init_array+0x2e>
 800048e:	bd70      	pop	{r4, r5, r6, pc}
 8000490:	f855 3b04 	ldr.w	r3, [r5], #4
 8000494:	4798      	blx	r3
 8000496:	3601      	adds	r6, #1
 8000498:	e7ee      	b.n	8000478 <__libc_init_array+0xc>
 800049a:	f855 3b04 	ldr.w	r3, [r5], #4
 800049e:	4798      	blx	r3
 80004a0:	3601      	adds	r6, #1
 80004a2:	e7f2      	b.n	800048a <__libc_init_array+0x1e>
 80004a4:	080004cc 	.word	0x080004cc
 80004a8:	080004cc 	.word	0x080004cc
 80004ac:	080004cc 	.word	0x080004cc
 80004b0:	080004d0 	.word	0x080004d0

080004b4 <_init>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr

080004c0 <_fini>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr
